<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="it"><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" hreflang="it" /><updated>2020-02-20T06:40:52+01:00</updated><id>/feed.xml</id><title type="html">Blazor Developer Italiani</title><subtitle>La prima community italiana dedicata allo sviluppo di applicazioni con Blazor, il framework Microsoft per la realizzazione di Single Page Application con .NET Core, SignalR, WebAssembly e Razor</subtitle><entry><title type="html">Creare una SPA: struttura</title><link href="/blazor/spa/2020/02/18/spa-struttura.html" rel="alternate" type="text/html" title="Creare una SPA: struttura" /><published>2020-02-18T00:00:00+01:00</published><updated>2020-02-18T00:00:00+01:00</updated><id>/blazor/spa/2020/02/18/spa-struttura</id><content type="html" xml:base="/blazor/spa/2020/02/18/spa-struttura.html">&lt;p&gt;Cominciamo a mettere le mani sul codice, creando la struttura della nostra Single Page Application. L’idea è quella di guidarvi nella realizzazione di una applicazione enterprise con Blazor, partendo da una classica CRUD (Create, Read, Update e Delete) di una entità e rifattorizzando man mano il codice, fino a renderlo riutilizzabile e condivisibile tra diversi progetti.&lt;/p&gt;

&lt;p&gt;Come avete potuto leggere negli articoli precedenti, c’è una differenza di fondo tra Blazor Server e Blazor WebAssembly, quindi dove necessario faremo le poche ma dovute distinzioni tra i due. Assicuratevi di aver installato i template di Blazor, come spiegato nel &lt;a href=&quot;/blazor/intro/2020/02/02/che-cosa-e-blazor.html&quot;&gt;primo articolo&lt;/a&gt;: si parte!&lt;/p&gt;

&lt;h2 id=&quot;la-struttura-del-progetto-con-blazor-server&quot;&gt;La struttura del progetto con Blazor Server&lt;/h2&gt;

&lt;p&gt;Creiamo un nuovo progetto specificando il nome della cartella da creare e in cui vogliamo generare il progetto:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;dotnet new blazorserver &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; event-manager-server&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Se non preferite la riga di comando potete usare il classico wizard di creazione di un nuovo progetto in Visual Studio. In entrambi i casi sarà creato un progetto ASP.NET Core preconfigurato per l’uso di Blazor Server. Se andiamo a guardare il file &lt;code class=&quot;highlighter-rouge&quot;&gt;Program.cs&lt;/code&gt; possiamo notare una classica configurazione di una applicazione ASP.NET Core:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;CreateHostBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateHostBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDefaultBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ConfigureWebHostDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;webBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseStartup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;La configurazione di Blazor Server viene fatta nella classe &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup&lt;/code&gt;, dove nel metodo &lt;code class=&quot;highlighter-rouge&quot;&gt;ConfigureServices&lt;/code&gt; viene aggiunto il supporto alle pagine Razor (&lt;code class=&quot;highlighter-rouge&quot;&gt;services.AddRazorPages()&lt;/code&gt;) e ai componenti Blazor (&lt;code class=&quot;highlighter-rouge&quot;&gt;services.AddServerSideBlazor()&lt;/code&gt;). Nel metodo &lt;code class=&quot;highlighter-rouge&quot;&gt;Configure&lt;/code&gt;, vengono poi impostati gli endpoints di Blazor: l’Hub SignalR (&lt;code class=&quot;highlighter-rouge&quot;&gt;endpoints.MapBlazorHub()&lt;/code&gt;) e l’indirizzo verso il quale navigare in caso di pagina non trovata (&lt;code class=&quot;highlighter-rouge&quot;&gt;endpoints.MapFallbackToPage(&quot;/_Host&quot;)&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Startup&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConfigureServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IServiceCollection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddRazorPages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddServerSideBlazor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IApplicationBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IWebHostEnvironment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseEndpoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endpoints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;endpoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MapBlazorHub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;endpoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MapFallbackToPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/_Host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Una volta configurato il tutto, andiamo a definire la nostra interfaccia utente, sfruttando un concetto molto utilizzato nei framework di sviluppo front-end moderni: il &lt;strong&gt;Componente&lt;/strong&gt;. L’idea è quella di prendere la nostra interfaccia e suddividerla in elementi più piccoli che chiamiamo componenti. In Blazor si parla di &lt;strong&gt;Blazor Components&lt;/strong&gt;: tecnicamente sono file con estensione &lt;code class=&quot;highlighter-rouge&quot;&gt;.razor&lt;/code&gt; nei quali andiamo a inserire il nostro markup, le direttive Razor e il codice C# associato al componente.&lt;/p&gt;

&lt;p&gt;Approfondiremo in un apposito articolo questo concetto, per il momento accontentiamoci di sapere che in Blazor Server la definizione dell’interfaccia parte da una singola pagina (da cui il nome &lt;em&gt;Single Page&lt;/em&gt; Application), chiamata solitamente &lt;code class=&quot;highlighter-rouge&quot;&gt;_Host.html&lt;/code&gt;, che contiene l’HTML di base e un primo componente.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;event-manager-server&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;base&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;~/&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;css/bootstrap/bootstrap.min.css&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;css/site.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;app&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;component&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;typeof(App)&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;render-mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ServerPrerendered&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/app&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blazor-error-ui&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;environment&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Staging,Production&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            An error has occurred. This application may no longer respond until reloaded.
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/environment&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;environment&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Development&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            An unhandled exception has occurred. See browser dev tools for details.
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/environment&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reload&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Reload&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dismiss&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;🗙&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_framework/blazor.server.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Come potete vedere, niente di diverso da una classica pagina HTML, fatta eccezione per alcuni elementi. Subito sotto il &lt;em&gt;body&lt;/em&gt; potete vedere l’utilizzo di un componente Blazor, denominato &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;e corrispondente al file &lt;code class=&quot;highlighter-rouge&quot;&gt;App.razor&lt;/code&gt; presente nel progetto.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;app&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;component&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;typeof(App)&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;render-mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ServerPrerendered&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/app&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Questo componente sarà elaborato lato server (&lt;code class=&quot;highlighter-rouge&quot;&gt;render-mode=&quot;ServerPrerendered&quot;&lt;/code&gt;) e sarà la radice dell’albero di componenti che costituirà la nostra interfaccia.&lt;/p&gt;

&lt;p&gt;Sotto questo componente c’è un blocco opzionale che in caso di errore mostra un messaggio che, in fase di staging o produzione, invita a ricaricare la pagina, nel caso invece siate in fase di sviluppo, indica di verificare gli errori nella console del browser.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blazor-error-ui&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;environment&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Staging,Production&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        An error has occurred. This application may no longer respond until reloaded.
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/environment&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;environment&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;include=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Development&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        An unhandled exception has occurred. See browser dev tools for details.
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/environment&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reload&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Reload&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dismiss&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;🗙&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Infine la parte più importante:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_framework/blazor.server.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Questo link scarica nel browser la componente client di Blazor Server, responsibile della comunicazione con il server mediante SignalR.&lt;/p&gt;

&lt;h2 id=&quot;la-struttura-del-progetto-con-blazor-webassembly&quot;&gt;La struttura del progetto con Blazor WebAssembly&lt;/h2&gt;

&lt;p&gt;Per Blazor WebAssembly dobbiamo solo modificare il nome del template e il nome del progetto:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;dotnet new blazorwasm &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; event-manager-wasm&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Anche in questo caso potete utilizzare il wizard di Visual Studio se non siete amanti della riga di comando. La struttura base del progetto è molto diversa dalla precedente, proprio perchè in questo caso non c’è elaborazione server, e il risultato sarà servito come un insieme di file statici.&lt;/p&gt;

&lt;p&gt;Notiamo subito l’assenza del file &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup.cs&lt;/code&gt;, che è stato rimosso nell’ultimo rilascio dato che non aveva molto senso in questo contesto: possiamo fare tutto il necessario per avviare il webserver che ci fornisce staticamente i file compilati direttamente dal &lt;code class=&quot;highlighter-rouge&quot;&gt;Program.cs&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebAssemblyHostBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RootComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RunAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Nel metodo &lt;code class=&quot;highlighter-rouge&quot;&gt;Main&lt;/code&gt;della classe &lt;code class=&quot;highlighter-rouge&quot;&gt;Program&lt;/code&gt; andiamo a instanziare il builder della configurazione predefinita di hosting. L’oggetto che ci viene restituito è di tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssemblyHostBuilder&lt;/code&gt;, che ci espone la collection &lt;code class=&quot;highlighter-rouge&quot;&gt;RootComponents&lt;/code&gt;: un insieme di oggetti composti dalle coppie Compontente/selettore. Nel nostro caso aggiungiamo un singolo componente radice (sì, è possibile averne più di uno, ma ne parleremo nei prossimi articoli), il componente &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt;, che identificheremo nel markup con il selettore &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;app&amp;gt;&amp;lt;/app&amp;gt;&lt;/code&gt;. Infine invochiamo il metodo Build(), di tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;WebAssemblyHost&lt;/code&gt;, che ci mette a disposizione la chiamata asincrona &lt;code class=&quot;highlighter-rouge&quot;&gt;RunAsync()&lt;/code&gt;, che avvia il nostro server e lo mette in attesa delle richieste.&lt;/p&gt;

&lt;p&gt;La nostra &lt;em&gt;Single Page&lt;/em&gt;, in questo caso denominata &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;, si trova nella cartella wwwroot perchè, come già detto, in questa versione di Blazor andiamo a servire risorse statiche, dato che non avviene elaborazione server-side, come invece accade con il file _Host.cshtml di Blazor Server. La struttura è molto simile alla precedente:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;event-manager-wasm&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;base&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;css/bootstrap/bootstrap.min.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;css/site.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;app&amp;gt;&lt;/span&gt;Loading...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/app&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blazor-error-ui&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        An unhandled error has occurred.
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reload&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Reload&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dismiss&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;🗙&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_framework/blazor.webassembly.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In questo caso il rendering del primo componente, che conterrà la nostra interfaccia, avviene semplicemente con il selettore specificato in fase di configurazione. Lo script che carichiamo prima di chiudere il &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;_framework/blazor.webassembly.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;) è quello di avvio e configurazione della versione WebAssembly di Mono (dotnet.wasm), che caricherà le nostre DLL e avvierà il rendering client-side.&lt;/p&gt;

&lt;h2 id=&quot;facciamo-un-po-di-pulizia&quot;&gt;Facciamo un po’ di pulizia&lt;/h2&gt;

&lt;p&gt;Adesso che abbiamo la struttura di base, facciamo qualche piccola modifica e un po’ di pulizia. Cominciamo con il cambiare il &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;title&amp;gt;&lt;/code&gt; della nostra Single Page (&lt;code class=&quot;highlighter-rouge&quot;&gt;_Host.cshtml&lt;/code&gt; in Blazor Server e &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; in Blazor WebAssembly) in “Event Manager” ed eliminiamo dalla cartella Pages i file &lt;code class=&quot;highlighter-rouge&quot;&gt;Counter.razor&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;FetchData.razor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Nella cartella &lt;code class=&quot;highlighter-rouge&quot;&gt;Shared&lt;/code&gt; troviamo il file &lt;code class=&quot;highlighter-rouge&quot;&gt;NavMenu.razor&lt;/code&gt;, il componente che rappresenta il menu dell’applicazione. Apriamolo ed eliminiamo le voci di menu Counter e FetchData, che puntano ai file che abbiamo eliminato. Sostituiamo anche il titolo del menu in “Event Manager”. Il codice risultante è il seguente per entrambi i progetti:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;top-row pl-4 navbar navbar-dark&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar-brand&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Event Manager&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar-toggler&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ToggleNavMenu&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar-toggler-icon&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@NavMenuCssClass&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ToggleNavMenu&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nav flex-column&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nav-item px-3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;NavLink&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nav-link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Match=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NavLinkMatch.All&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;oi oi-home&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-hidden=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt; Home
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/NavLink&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

@code {
    ...
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Dalla cartella &lt;code class=&quot;highlighter-rouge&quot;&gt;Pages&lt;/code&gt; aprimo il file &lt;code class=&quot;highlighter-rouge&quot;&gt;Index.razor&lt;/code&gt; e sostituiamo il contenuto con un messaggio di benvenuto:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;@page &quot;/&quot;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Event Manager&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Benvenuti nella Single Page Application scritta in Blazor per la gestione degli eventi.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Selezionare dal menu laterale l'opzione desiderata.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Infine, dal progetto Blazor Server eliminiamo la cartella &lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt; che contiene un servizio con dei dati fake, utilizzato dalla pagina FetchData per mostrare l’utilizzo di dati dal back-end. Nel file &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup.cs&lt;/code&gt;, andiamo di conseguenza ad eliminare la registrazione della classe &lt;code class=&quot;highlighter-rouge&quot;&gt;WeatherForecastService&lt;/code&gt;. Stesso lavoro di pulizia va fatto anche nel progetto WebAssembly, ma in questo caso ci basta eliminare la cartella &lt;code class=&quot;highlighter-rouge&quot;&gt;wwwroot &amp;gt; sample-data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Avviamo il progetto (&lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet run&lt;/code&gt; da riga di comando o &lt;code class=&quot;highlighter-rouge&quot;&gt;F5&lt;/code&gt; da Visual Studio) e verifichiamo il risultato del nostro lavoro:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/spa-struttura-progetto/blazor-spa-struttura-base.png&quot; alt=&quot;Struttura base progetto SPA con Blazor&quot; title=&quot;Struttura base progetto SPA con Blazor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La tipica bellezza estetica di cui è capace uno sviluppatore… ma funziona! Trovate il codice sorgente, organizzato in branch per ogni articolo della serie, &lt;a href=&quot;https://github.com/blazordevita/BlazorSPA&quot;&gt;qui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusioni&quot;&gt;Conclusioni&lt;/h2&gt;

&lt;p&gt;Per oggi ci fermiamo qui, nel prossimo articolo vedremo nel dettaglio che cos’è un componente, sia dal punto di vista logico che dal punto di vista tecnico, e come questo concetto sia il mattoncino con cui costruire la user interface della nostra Single Page Application.&lt;/p&gt;</content><author><name>Michele Aponte</name></author><summary type="html">Cominciamo a mettere le mani sul codice, creando la struttura della nostra Single Page Application. L’idea è quella di guidarvi nella realizzazione di una applicazione enterprise con Blazor, partendo da una classica CRUD (Create, Read, Update e Delete) di una entità e rifattorizzando man mano il codice, fino a renderlo riutilizzabile e condivisibile tra diversi progetti.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/articoli/spa-struttura-progetto/spa-struttura-progetto.png" /><media:content medium="image" url="/assets/articoli/spa-struttura-progetto/spa-struttura-progetto.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Quale Blazor scegliere?</title><link href="/blazor/intro/2020/02/14/blazorserver-vs-blazorwebassembly.html" rel="alternate" type="text/html" title="Quale Blazor scegliere?" /><published>2020-02-14T00:00:00+01:00</published><updated>2020-02-14T00:00:00+01:00</updated><id>/blazor/intro/2020/02/14/blazorserver-vs-blazorwebassembly</id><content type="html" xml:base="/blazor/intro/2020/02/14/blazorserver-vs-blazorwebassembly.html">&lt;p&gt;Come avete potuto leggere negli articoli precedenti, il funzionamento di base di Blazor Server è completamente diverso dalla versione WebAssembly, pur condividendo il modo in cui vengono realizzati i componenti e strutturate le pagine. Come facciamo a scegliere quale dei due fa al caso nostro? O, meglio, quale dei due si adatta meglio ai nostri requisiti?&lt;/p&gt;

&lt;h2 id=&quot;blazor-webassembly-vs-blazor-server&quot;&gt;Blazor WebAssembly vs Blazor Server&lt;/h2&gt;

&lt;p&gt;Ad oggi Blazor WebAssembly è in preview, quindi non è possibile utilizzarlo in produzione. Questo è un problema che sarà risolto entro Maggio di quest’anno, mese in cui è previsto il rilascio in RTM di questa versione del framework. Inoltre, per poter funzionare, la versione WASM richiede il supporto del browser, che ad oggi è garantita su Edge, Firefox, Safari, Opera e i principali browser mobile. Possiamo verificare il supporto &lt;a href=&quot;https://caniuse.com/#search=webassembly&quot;&gt;qui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorserver-blazorwebassembly/supporto_browser_webassembly.png&quot; alt=&quot;Supporto WebAssembly sui browser&quot; title=&quot;Supporto WebAssembly sui browser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;D’altro canto, l’utilizzo di SignalR in Blazor Server, &lt;strong&gt;&lt;em&gt;su numeri veramente importanti&lt;/em&gt;&lt;/strong&gt;, può creare un limite di scalabilità, che va gestito opportunamente. Il problema nasce perchè SignalR richiede che sia lo stesso processo server a gestire una specifica connessione, quindi la scalabilità di SignalR è legata a quella della singola macchina. Se aggiungiamo macchine per gestire più utenti, dobbiamo assicurarci che le richieste dei singoli utenti arrivino alla stessa macchina da cui la connessione è iniziata, cosa che può essere gestita, per esempio, con i sistemi di &lt;em&gt;affinity&lt;/em&gt; dei Load Balancer.&lt;/p&gt;

&lt;p&gt;Tutto questo è necessario perchè la negoziazione di SignalR potrebbe non scegliere WebSocket come trasporto, cosa che volendo è possibile forzare utilizzando il valore &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; per l’impostazione &lt;code class=&quot;highlighter-rouge&quot;&gt;SkipNegotiation&lt;/code&gt;, ma ci escluderebbe i client che non supportano WebSocket.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorserver-blazorwebassembly/signalrservice_redisbackplane.png&quot; alt=&quot;SignalR Service vs Redis Backplane&quot; title=&quot;SignalR Service vs Redis Backplane&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Se ospitiamo la vostra applicazione su Azure, esiste un apposito servizio chiamato &lt;strong&gt;&lt;a href=&quot;https://azure.microsoft.com/it-it/services/signalr-service/&quot;&gt;Azure SignalR Service&lt;/a&gt;&lt;/strong&gt; che risolve il problema per noi. Se siete on-premise o non volete usare SignalR Service è possibile utilizzare &lt;strong&gt;&lt;a href=&quot;https://redis.io/&quot;&gt;Redis&lt;/a&gt;&lt;/strong&gt;, il famoso key-value store spesso usato per il caching dei dati, come &lt;strong&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore.Docs/blob/master/aspnetcore/signalr/redis-backplane.md&quot;&gt;Backplane&lt;/a&gt;&lt;/strong&gt;: si tratta di sfruttare Redis come &lt;em&gt;Hub&lt;/em&gt; per la gestione delle connessioni, inviandogli tutte le informazioni sui client collegati, e il dispatching dei messaggi, mandandogli i messaggi da inviare ai client giusti. Possiamo trovare maggiorni informazioni &lt;a href=&quot;https://docs.microsoft.com/it-it/aspnet/core/signalr/redis-backplane?view=aspnetcore-3.1&quot;&gt;qui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Un’altra differenza tra i due è il framework .NET utilizzato: nel caso di Blazor Server abbiamo a disposizione tutto il framework .NET Core, mentre con Blazor WebAssembly utilizziamo Mono, grazie alla compatibilità garantita dalle Standard Libraries. Viste le limitazioni che abbiamo nel browser in termini di sicurezza, anche questo non è un problema discriminante, ma va comunque preso in considerazione.&lt;/p&gt;

&lt;p&gt;Analizzati i problemi &lt;em&gt;risolvibili&lt;/em&gt;, vediamo adesso le caratteristiche che separano nettamente le due versioni del framework.&lt;/p&gt;

&lt;h3 id=&quot;on-line-vs-off-line&quot;&gt;On-line vs off-line&lt;/h3&gt;

&lt;p&gt;Una delle principali caratteristiche di una Single Page Application è quella di elaborare sul client l’interfaccia utente, cosa che potrebbe essere fatta senza nessun supporto da parte del server. In Blazor Server questa operazione non è possibile, perchè l’elaborazione avviene sul server e richiede una connessione stabile per il funzionamento.&lt;/p&gt;

&lt;p&gt;In Blazor WebAssembly possiamo invece supportare gli &lt;strong&gt;scenari off-line&lt;/strong&gt;, lavorare cioè in assenza di connessione. Il framework ci fornisce la possibilità di lavorare sul client e interrogare il server solo quando abbiamo bisogno di recuperare o inviare dati, utilizzando l’HTTP Client. Supportare veramente uno scenario off-line però è una cosa più complessa, richiede la capacità di rilevare la presenza o meno della connessione e lavorare sui dati anche in assenza di essa, essenso capaci poi di &lt;em&gt;riconciliarli&lt;/em&gt; una volta che la connessione torna disponibile. Essere in grado di lavorare off-line ci abilita anche alla realizzazione di una &lt;strong&gt;&lt;a href=&quot;https://it.wikipedia.org/wiki/Progressive_Web_App&quot;&gt;Progressive Web App (PWA)&lt;/a&gt;&lt;/strong&gt;, cosa da non sottovalutare.&lt;/p&gt;

&lt;p&gt;Quindi nei casi in cui non abbiamo necessità di collegarci al server o vi ci collegiamo saltuariamente, possiamo sfruttare Blazor WebAssembly senza costi aggiuntivi. In Blazor Server questa cosa non è proprio possibile.&lt;/p&gt;

&lt;p&gt;C’è però da valutare un altro aspetto: i &lt;strong&gt;dati sensibili&lt;/strong&gt;. Premesso che dovremmo sempre evitare con tutte le vostre forze di gestire dati sensibili nel presentation layer delle nostre applicazioni, avere il codice sul client ci espone a rendere accessibili tali informazioni. Utilizzando Blazor Server tutto resta sul server e eventuali dati sensibili, come dei token di accesso a servizi terzi come quelli di Azure, non vengono proprio inviati al client.&lt;/p&gt;

&lt;h3 id=&quot;dimensioni-e-latenza&quot;&gt;Dimensioni e latenza&lt;/h3&gt;

&lt;p&gt;La &lt;strong&gt;dimensione&lt;/strong&gt; dei dati da scaricare in Blazor WebAssembly, al primo download, è molto più grande di quella necessaria per Blazor Server. Questo perchè nel primo caso scarichiamo nel browser tutte le librerie, il framework Mono per Webassembly e tutti i file di supporto; nel secondo caso invece tiriamo giù solo HTML, CSS e JavaScript, mentre il resto viene fato lato server. In una applicazione enterprise attendere qualche secondo per il primo download non è un grosso problema, mentre se decidessimo di usare Blazor per un sito o una applicazione pubblica, il primo download può impattare sull’esperienza utente.&lt;/p&gt;

&lt;p&gt;Strettamente collegata alla questione on-line/off-line c’è anche la questione &lt;strong&gt;latenza&lt;/strong&gt;: dover richiamare il server per ogni operazione di aggiornamento dell’interfaccia può impattare sulle prestazioni e sull’esperienza utente in caso di connessione non stabile.&lt;/p&gt;

&lt;p&gt;Il problema della dimensione è uno degli aspetti su cui il team di Microsoft sta lavorando prima del rilascio in RTM di Blazor WebAssembly, insieme all’esperienza di debug…&lt;/p&gt;

&lt;h3 id=&quot;esperienza-di-debug&quot;&gt;Esperienza di debug&lt;/h3&gt;

&lt;p&gt;Con Blazor Server stiamo lavorando con una vera e propria applicazione ASP.NET Core, il tutto avviene sul server e quindi basta mettere un punto di interruzione nel codice per eseguire le fasi di debug della nostra applicazione. Su questo i tool Microsoft hanno pochi rivali sul mercato, e sia che usiate Visual Studio Code che Visual Studio, l’esperienza di debug sarà estramemente confortante.&lt;/p&gt;

&lt;p&gt;Su questo Blazor WebAssembly non riesce, ad oggi, a tenere il passo. Il debug avviene nel browser, in un tab separato, abilitando opportunamente il tutto con dei comandi specifici. Il primo passo è avviare l’applicazione con la configurazione di Debug: &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet run --configuration Debug&lt;/code&gt;. Apriamo il browser e tenendo il focus sulla nostra applicazione, utilizziamo la combinazione di tasti &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift+Alt+D&lt;/code&gt; se siamo su Windows o &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift+Cmd+D&lt;/code&gt; se siamo su MAC. Vi si aprirà un nuovo tab in cui troverete le istruzioni su come avviare il browser (Chrome o Edge) in modalità di Debug:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorserver-blazorwebassembly/blazorwebassembly-comandi-abilitazione-debug.png&quot; alt=&quot;Comandi per il Debug di Blazor WebAssembly&quot; title=&quot;Comandi per il Debug di Blazor WebAssembly&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copiate il comando proposto nel tab, chiudete tutte le istanze di browser aperte, incollate nel terminale il comando copiato e lanciatelo: sarà aperto il browser scelto in cui potete aprire l’applicazione e rieseguire la seguenza di tasti che aprirà il tab per il debug:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorserver-blazorwebassembly/blazor-webassembly-debug.png&quot; alt=&quot;Debug di Blazor WebAssembly&quot; title=&quot;Debug di Blazor WebAssembly&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Possiamo impostare e rimuovere i punti di interruzione, usare &lt;code class=&quot;highlighter-rouge&quot;&gt;F10&lt;/code&gt;e &lt;code class=&quot;highlighter-rouge&quot;&gt;F8&lt;/code&gt;per muoverci nel codice e nella sezione variabili locali e stack per guardare il valore delle variabili o lo stack delle chiamate. Purtroppo però al momento possiamo vedere solo le variabili di tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; o &lt;code class=&quot;highlighter-rouge&quot;&gt;bool&lt;/code&gt; e solo nella sezione variabili locali, quindi non possiamo usare il mouse per sovrapporci alla variabile interessata e vederne nel tooltip il valore corrente. Non possiamo valutare le espressioni nella console come facciamo con la finestra immediata di Visual Studio e muoverci tra le chiamate asincrone.&lt;/p&gt;

&lt;p&gt;Considerate che uno dei principali problemi in questo caso e il mapping tra il codice sorgente e il codice eseguito, che nel mondo JavaScript è risolto anche in casi di transpilazione (TypeScript) e minificazione con l’uso dei file &lt;code class=&quot;highlighter-rouge&quot;&gt;.map&lt;/code&gt;, in questo caso non avendo un mapping diretto tra C# e WASM (come abbiamo detto nel precedente articolo, il codice C# non viene compilato direttamente in WASM), la cosa diventa più complessa.&lt;/p&gt;

&lt;p&gt;Sì, è un po’ disarmante, ma il team di Microsoft ci sta lavorando duramente per arrivare a una esperienza di debug moderna prima del rilascio della RTM.&lt;/p&gt;

&lt;h3 id=&quot;conclusioni&quot;&gt;Conclusioni&lt;/h3&gt;

&lt;p&gt;Quale scegliere quindi? La risposta è: dipende! Non dovrebbe mai essere la tecnologia a guidare la scelta e inventare poi requisiti per giustificarla: scegliete in base ai requisiti. Date però importanza anche ai requisiti &lt;em&gt;non funzionali&lt;/em&gt;, che spesso e volentieri possono fare la differenza tra una applicazione di successo e una che non viene utilizzata.&lt;/p&gt;

&lt;p&gt;Finisce qui la nostra introduzione al framework, dai prossimi articoli entreremo nel dettaglio di come realizzare una Single Page Application con Blazor, con un approccio estremamente pratico e introducendo dei pattern che possono aiutarci a manutenere meglio il nostro codice e a gestire le situazioni ibride che spesso sono parte integrante della vita reale.&lt;/p&gt;</content><author><name>Michele Aponte</name></author><summary type="html">Come avete potuto leggere negli articoli precedenti, il funzionamento di base di Blazor Server è completamente diverso dalla versione WebAssembly, pur condividendo il modo in cui vengono realizzati i componenti e strutturate le pagine. Come facciamo a scegliere quale dei due fa al caso nostro? O, meglio, quale dei due si adatta meglio ai nostri requisiti?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/articoli/blazorserver-blazorwebassembly/blazorserver_vs_blazorwebassembly.png" /><media:content medium="image" url="/assets/articoli/blazorserver-blazorwebassembly/blazorserver_vs_blazorwebassembly.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Blazor WebAssembly</title><link href="/blazor/intro/2020/02/11/blazor-webassembly.html" rel="alternate" type="text/html" title="Blazor WebAssembly" /><published>2020-02-11T00:00:00+01:00</published><updated>2020-02-11T00:00:00+01:00</updated><id>/blazor/intro/2020/02/11/blazor-webassembly</id><content type="html" xml:base="/blazor/intro/2020/02/11/blazor-webassembly.html">&lt;p&gt;Dopo Blazor Server vediamo come funziona la versione WebAssembly, attualmente in preview ma già sperimentabile in attesa del rilascio di Maggio 2020.&lt;/p&gt;

&lt;h2 id=&quot;webassembly-non-di-solo-javascript-vive-il-browser&quot;&gt;WebAssembly: non di solo JavaScript vive il browser&lt;/h2&gt;

&lt;p&gt;Lo sviluppo web ci ha abituato a pensare che l’unico modo di eseguire codice nel browser sia JavaScript, ed è stato così fino all’arrivo della specifica &lt;strong&gt;WebAssembly&lt;/strong&gt; e della sua adozione nei principali browser moderni.&lt;/p&gt;

&lt;p&gt;Il primo annuncio fu nel 2015, ma abbiamo dovuto attendere fino al 2017 per una prima preview. Nel Febbraio 2018 il &lt;strong&gt;&lt;em&gt;WebAssembly Working Group&lt;/em&gt;&lt;/strong&gt;, di cui &lt;strong&gt;Microsoft&lt;/strong&gt; è parte attiva insieme a &lt;strong&gt;Mozilla&lt;/strong&gt;, &lt;strong&gt;Google&lt;/strong&gt; e &lt;strong&gt;Apple&lt;/strong&gt;, coordinati dal &lt;strong&gt;W3C (World Wide Web Consortium)&lt;/strong&gt;, ha pubblicato le bozze della parte &lt;a href=&quot;https://webassembly.github.io/spec/core/bikeshed/index.html&quot;&gt;Core&lt;/a&gt; della specifica, insieme a quelle di &lt;a href=&quot;https://webassembly.github.io/spec/js-api/index.html&quot;&gt;interoperabilità con JavaScript&lt;/a&gt; e &lt;a href=&quot;https://webassembly.github.io/spec/web-api/index.html&quot;&gt;Web API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ad altissimo livello, possiamo immaginare il browser come un contenitore in cui possiamo definire la nostra interfaccia utilizzando HTML e CSS, interagendo tramite JavaScript con le API del browser (DOM, WebSocket, File API, Web Storage, ecc.). JavaScript viene eseguito all’interno di un ambiente controllato, chiamato &lt;strong&gt;JavaScript Runtime&lt;/strong&gt;, che fornisce &lt;strong&gt;&lt;em&gt;un unico thread&lt;/em&gt;&lt;/strong&gt; per ogni tab o dominio che viene visualizzato.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorwebassembly/webassembly_browser.png&quot; alt=&quot;WebAssembly nel browser&quot; title=&quot;WebAssembly nel browser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;WebAssembly si piazza esattamente nello stesso runtime, condividendo quindi gioie e dolori di questo ambiente e la possibilità di interagire con JavaScript. Questo significa che WebAssembly ci permette di fare tutto quello che facciamo con JavaScript e, laddove ci serva integrare codice legacy o utilizzare librerie JavaScript già pronte, è possibile invocare una funzione JavaScript da un metodo C#. Sicuramente interessante anche la possibilità di fare il contrario, invocare cioè da JavaScript una funzione esposta da WebAssembly.&lt;/p&gt;

&lt;h2 id=&quot;da-net-a-wasm-cosa-cè-veramente-sotto&quot;&gt;Da .NET a WASM: cosa c’è veramente sotto?&lt;/h2&gt;

&lt;p&gt;Prima che si faccia confusione cerchiamo di capire davvero come funziona Blazor WebAssembly.&lt;/p&gt;

&lt;p&gt;Lo standard WebAssembly, detto anche &lt;strong&gt;WASM&lt;/strong&gt;, fornisce un formato binario nato con lo scopo di eseguire nel browser codice ad una velocità simile a quella del codice nativo. E’ possibile generare questo codice a partire da linguaggi ad alto livello, come C++, ma al momento &lt;strong&gt;non esiste un compilatore da C# a WASM&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorwebassembly/da_csharp_a_webassembly.png&quot; alt=&quot;Da C# a WebAssembly&quot; title=&quot;Da C# a WebAssembly&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Blazor ci permette di eseguire nel browser codice &lt;strong&gt;IL (Intermediate Language)&lt;/strong&gt;, generato a partire da C#, grazie al porting del &lt;strong&gt;runtime di &lt;a href=&quot;https://github.com/mono/mono&quot;&gt;mono&lt;/a&gt;&lt;/strong&gt; allo standard WASM. I file contenenti codice WebAssembly hanno estensione WASM, il runtime di mono compilato per WebAssembly aveva il nome &lt;em&gt;mono.wasm&lt;/em&gt;, rinominato nell’ultima versione a &lt;em&gt;dotnet.wasm&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se ad esempio il nostro progetto si chiama &lt;em&gt;MyBlazorApp&lt;/em&gt;, non ci sarà un &lt;em&gt;MyBlazoApp.WASM&lt;/em&gt;, ma un &lt;em&gt;MyBlazorApp.DLL&lt;/em&gt;, che potete facilmente ispezione con un inspector di codice IL, come l’estensione per Visual Studio Code &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=icsharpcode.ilspy-vscode&quot;&gt;ILSpy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorwebassembly/blazorapp_ILSpy.png&quot; alt=&quot;Ispezione IL Blazor App&quot; title=&quot;Ispezione IL Blazor App&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dal-template-al-browser&quot;&gt;Dal template al browser&lt;/h2&gt;

&lt;p&gt;Passiamo alla pratica! Creiamo un progetto Blazor WebAssembly e chiamiamolo &lt;code class=&quot;highlighter-rouge&quot;&gt;MyBlazorApp&lt;/code&gt; con il comando &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet new blazorwasm -o MyBlazorApp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Con gli ultimi aggiornamenti, in questo tipo di progetto è stata notevolmente semplificata la configurazione, eliminando la classe &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup.cs&lt;/code&gt; tipica dei progetti ASP.NET Core. Ha molto senso perchè il compilato di una applicazione WebAssembly è un insieme di file statici, che possono essere distribuiti con un qualsiasi web server, senza nessun bisogno di .NET. Quello che vediamo nel file &lt;code class=&quot;highlighter-rouge&quot;&gt;Program.cs&lt;/code&gt; è la configurazione del web server che servirà i file e la registrazione del componente principale.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebAssemblyHostBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RootComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RunAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Eseguendo il progetto con il comando &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet run&lt;/code&gt; o con il classico &lt;code class=&quot;highlighter-rouge&quot;&gt;F5&lt;/code&gt; di Visual Studio, possiamo vedere il risultato all’indirizzo &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:5000&lt;/code&gt;: lanciate il browser e aprite i tool per gli sviluppatori sulla sezione Network, per verificare cosa viene scaricato.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorwebassembly/blazor_webassembly_file_scaricati.png&quot; alt=&quot;File scaricati con Blazor WebAssembly&quot; title=&quot;File scaricati con Blazor WebAssembly&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sì, non ci sono errori, quelle che vedete sono delle DLL scaricate nel browser! Non lasciate venire alla mente ricordi molesti (non è Silverlight…), ma grazie a &lt;strong&gt;dotnet.wasm&lt;/strong&gt; possiamo eseguire le librerie .NET standard del progetto, compreso il nostro &lt;em&gt;MyBlazorApp.dll&lt;/em&gt;. Nel file &lt;code class=&quot;highlighter-rouge&quot;&gt;blazor.boot.json&lt;/code&gt; trovate l’elenco degli assembly che devono essere caricati, utilizzato dallo script &lt;code class=&quot;highlighter-rouge&quot;&gt;blazor.webassembly.js&lt;/code&gt; per inizializzare l’applicazione.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorwebassembly/blazor_webassembly_httpclient.png&quot; alt=&quot;Blazor WebAssembly HTTP Client&quot; title=&quot;Blazor WebAssembly HTTP Client&quot; /&gt;&lt;/p&gt;

&lt;p&gt;L’applicazione sta girando nel client, niente WebSocket e niente back-end. Se pulite la sezione Network e cliccate sul counter dell’applicazione, vedrete che nessuna chiamata al server viene fatta. Se invece vi spostate su Fetch data, potete vedere la chiamata HTTP per il recupero dei dati visualizzati nella tabella, ma il rendering dell’HTML viene fatto client-side.&lt;/p&gt;

&lt;h2 id=&quot;conclusioni&quot;&gt;Conclusioni&lt;/h2&gt;

&lt;p&gt;Per oggi ci fermiamo qui. In questo articolo abbiamo analizzato le peculiarità di Blazor WebAssembly, cercando di capire le principali differenze di funzionamento con Blazor Server. Nel prossimo articolo faremo un confronto tra i due, analizzando pro e contro di ogni versione e in quali contesti una delle due risponde meglio ai nostri requisiti.&lt;/p&gt;</content><author><name>Michele Aponte</name></author><summary type="html">Dopo Blazor Server vediamo come funziona la versione WebAssembly, attualmente in preview ma già sperimentabile in attesa del rilascio di Maggio 2020.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/articoli/blazorwebassembly/blazorwebassembly.png" /><media:content medium="image" url="/assets/articoli/blazorwebassembly/blazorwebassembly.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Da Web Forms a Blazor Server</title><link href="/blazor/intro/2020/02/07/da-web-forms-a-blazor-server.html" rel="alternate" type="text/html" title="Da Web Forms a Blazor Server" /><published>2020-02-07T00:00:00+01:00</published><updated>2020-02-07T00:00:00+01:00</updated><id>/blazor/intro/2020/02/07/da-web-forms-a-blazor-server</id><content type="html" xml:base="/blazor/intro/2020/02/07/da-web-forms-a-blazor-server.html">&lt;p&gt;Vediamo come funziona la versione Server di Blazor, resa disponibile con .NET Core 3.0 e utilizzabile già in produzione.&lt;/p&gt;

&lt;h2 id=&quot;cera-una-volta-aspnet-web-forms&quot;&gt;C’era una volta ASP.NET Web Forms&lt;/h2&gt;

&lt;p&gt;Ricordate come funzionava (e funziona ancora…) &lt;strong&gt;ASP.NET Web Forms&lt;/strong&gt;? Una pagina HTML, all’interno di una grande form, con un campo nascosto (il famoso &lt;strong&gt;ViewState&lt;/strong&gt;) contenente una stringa crittografata rappresentante lo stato della pagina, cioè il valore corrente di tutti i controlli server nella pagina. Questa form, mandata al server ogni volta che l’interazione dell’utente richiedesse un aggiornamento dell’interfaccia, scatenava l’esecuzione del motore di ASP.NET Web Forms, che aggiornava l’HTML e il valore del ViewState in base agli handler del code behind. Il nuovo HTML, comprensivo del nuovo ViewState, veniva rimandando indietro (processo chiamato &lt;strong&gt;Postback&lt;/strong&gt;) alla stessa pagina.&lt;/p&gt;

&lt;p&gt;Alla fine dei conti, lo sviluppo web è basato su questo meccanismo: catturo l’interazione dell’utente, faccio una richiesta HTTP al server e ottengo una risposta HTTP che uso per aggiornare l’interfaccia. Web Forms cercava solo di automatizzare questo processo, per nascondere i dettagli di funzionamento del protocollo ai programmatori Microsoft che venivano dal mondo Desktop, che erano abituati a ragionare in termini di Form, controlli e Handler di eventi nel &lt;em&gt;code behind&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorserver/bici.jpg&quot; alt=&quot;Da WebForms a MVC: togliere le rotelle alla bici&quot; title=&quot;Da WebForms a MVC: togliere le rotelle alla bici&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Questa astrazione portava con se però una grossa inefficenza in termini di scambio dati e di esperienza utente, visto che nella maggior parte dei casi viene spostata avanti e indietro tutta la pagina, con un refresh dell’interfaccia ad ogni interazione. La cosa fu mitigata con l’arrivo dell’ &lt;strong&gt;Update Panel&lt;/strong&gt;, che rendeva asincrono lo scambio utilizzando &lt;em&gt;AJAX&lt;/em&gt; in maniera trasparente al programmatore, risolvendo il problema del refresh.&lt;/p&gt;

&lt;p&gt;Quando questa astrazione è diventata ingombrante e abbiamo accettato l’idea di doverci scrivere l’HTML (anzichè generarlo dai controlli server) e controllare l’interazione con il server, utilizzando JavaScript dove necessario, siamo passati a &lt;strong&gt;ASP.NET MVC&lt;/strong&gt;: è stato un po’ come togliere le rotelle alla bici, all’inizio ci siamo demoralizzati per qualche caduta, ma poi abbiamo scoperto che potevamo correre senza limitazioni.&lt;/p&gt;

&lt;h2 id=&quot;aspnet-core-razor-e-signalr&quot;&gt;ASP.NET Core, Razor e SignalR&lt;/h2&gt;

&lt;p&gt;Se conoscete già ASP.NET Core, SignalR e Razor, avete già tutti gli elementi per utilizzare Blazor Server. Questa è probabilmente una delle principali ragioni che ha creato tanto entusiasmo attorno al framework. Facciamo un piccolo recap per chi non ha ancora avuto la possibilità di apprezzare il nuovo framework Microsoft.&lt;/p&gt;

&lt;h3 id=&quot;da-aspnet-a-aspnet-core&quot;&gt;Da ASP.NET a ASP.NET Core&lt;/h3&gt;

&lt;p&gt;Con l’introduzione di ASP.NET MVC nel 2008, gli sviluppatori Microsoft cominciarono (pian piano…) ad apprezzare il nuovo modello di sviluppo web, basato su un adattamento del pattern &lt;em&gt;MVC&lt;/em&gt;. Qualche anno dopo fu aggiunto al framework un gemello per la realizzazione di &lt;strong&gt;API REST&lt;/strong&gt;, &lt;strong&gt;ASP.NET WEB API&lt;/strong&gt;. Il tutto strettamente legato a &lt;strong&gt;IIS&lt;/strong&gt;, l’application framework di Microsoft distribuito principalmente con le versioni server di Windows. Quindi per un periodo abbastanza lungo abbiamo avuto il nostro &lt;em&gt;Windows Server&lt;/em&gt;, sul quale installavamo IIS e il .NET Framework che forniva ASP.NET come base di integrazione con IIS, che ci metteva a disposizione 3 framework tra cui scegliere: ASP.NET Web Forms, ASP.NET MVC e ASP.NET WEB API. Una infrastruttura un po’ ridondante in alcuni punti, ma che serviva allo scopo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorserver/aspnet-stack.png&quot; alt=&quot;ASP.NET STACK&quot; title=&quot;ASP.NET STACK&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A un certo punto però, per ragioni che avremmo compreso fino in fondo solo anni dopo, il legame tra ASP.NET e IIS è cominciato ad andare un po’ stretto. Questo portò all’introduzione di &lt;strong&gt;&lt;a href=&quot;http://owin.org/&quot;&gt;OWIN&lt;/a&gt;&lt;/strong&gt;, uno standard aperto che definisce una interfaccia tra un web server .NET e una applicazione web. Insieme allo standard venne fornito anche una implementazione, chiamata &lt;strong&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetKatana/&quot;&gt;Katana&lt;/a&gt;&lt;/strong&gt;, che contrattualizzava il legame tra ASP.NET e IIS. Il tutto fu introdotto con la versione 4 di MVC, fornendo di fatto la possibilità di far girare applicazioni ASP.NET MVC su web server diversi da IIS.&lt;/p&gt;

&lt;p&gt;Aggiungiamo che in quel periodo i rilasci di ASP.NET seguivano quelli del .NET Framework, nonostante il web si evolvesse ad una velocità più alta del framework di base. Ma la vera ragione che portò a un momento di rottura fu il fatto che ASP.NET non era stato creato pensando agli scenari &lt;em&gt;Cloud&lt;/em&gt;, e Microsoft stava per puntare tutto sul suo Cloud: &lt;strong&gt;Microsoft Azure&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Nel 2016 fu rilasciata la prima versione di &lt;strong&gt;ASP.NET Core&lt;/strong&gt;, basata su un nuovo framework .NET &lt;strong&gt;&lt;em&gt;cross-platform&lt;/em&gt;&lt;/strong&gt; che fu chiamato &lt;strong&gt;.NET Core&lt;/strong&gt;. Gli aggiornamenti di ASP.NET non dovevano più essere legati al framework sottostante, quindi tutto è stato basato su &lt;strong&gt;NuGet&lt;/strong&gt;. Con l’occasione sono stati unificati i framework MVC e WEB API, abbandonando definitivamente Web Forms. Il framework fornisce di base strumenti integrati per configurazione, logging e &lt;strong&gt;&lt;em&gt;Dependency Injection&lt;/em&gt;&lt;/strong&gt;,  e ci si può costruire la propria pipeline HTTP, utilizzando i middleware Owin: una vera e propria rivoluzione. Grazie al rilascio contestuale di &lt;strong&gt;Kestrel&lt;/strong&gt;, un web server cross-platform compatibile OWIN, è possibile far girare .NET Core su Windows, Linux e MacOS, aprendo scenari incredibili.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorserver/net-netcore.png&quot; alt=&quot;.NET e .NET Core Stack&quot; title=&quot;.NET e .NET Core Stack]&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Il .NET Framework è ancora lì (per il momento), accanto a .NET Core, utilizzando le Standard Libraries per condividere il codice tra i due mondi. Il prossimo passo sarà &lt;strong&gt;&lt;a href=&quot;https://devblogs.microsoft.com/dotnet/introducing-net-5/&quot;&gt;.NET 5&lt;/a&gt;&lt;/strong&gt;, che unificherà tutto lo stack tecnologico Microsoft.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorserver/dotnet5.png&quot; alt=&quot;Il futuro di .NET: .NET 5&quot; title=&quot;Il futuro di .NET: .NET 5&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;razor&quot;&gt;Razor&lt;/h3&gt;

&lt;p&gt;In ASP.NET il rendering server-side delle pagine web è sempre stato affidato al &lt;strong&gt;View Engine&lt;/strong&gt;, il motore che analizza il misto tra markup, codice .NET, direttive e componenti custom e li traduce in HTML per il browser.&lt;/p&gt;

&lt;p&gt;In ASP.NET Web Forms il View Engine di default era &lt;strong&gt;ASPX&lt;/strong&gt;, che utilizzava i simboli  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;%&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;%&amp;gt;&lt;/code&gt; per introdurre nel markup il codice C# o Visual Basic:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prodotto&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Prodotti&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prodotto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Disponibile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prodotto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NomeProdotto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disponibile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prodotto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NomeProdotto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disponibile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Nel passaggio a MVC fu introdotto un nuovo View Engine chiamato &lt;strong&gt;Razor&lt;/strong&gt;, con una sintassi meno invasiva di ASPX e che utilizza il simbolo &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; per introdurre nel markup il codice C# o Visual Basic:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;@foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prodotto&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Prodotti&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;@if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prodotto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Disponibile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@prodotto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NomeProdotto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disponibile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@prodotto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NomeProdotto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disponibile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Razor diventò il default per i progetti MVC e la sua semplicità di utilizzo lo ha portato a diventare parte integrante di una versione semplificata di ASP.NET MVC chiamata &lt;strong&gt;Razor Pages&lt;/strong&gt;, un modello nel quale al posto di Controller e View viene introdotto il concetto di &lt;em&gt;Page&lt;/em&gt; che contiene sia il markup che il codice che la gestisce.&lt;/p&gt;

&lt;h3 id=&quot;signalr&quot;&gt;SignalR&lt;/h3&gt;

&lt;p&gt;Nello sviluppo web di solito è il client che apre una connessione al server, fa una richiesta HTTP e ottiene una risposta HTTP, con la quale la connessione viene chiusa. Spesso però abbiamo bisogno di sapere se lato server è cambiato qualcosa.&lt;/p&gt;

&lt;p&gt;Possiamo sicuramente fare delle richieste periodiche in maniera automatica per verificare se qualcosa è cambiato, ma questa operazione, che viene chiamata &lt;strong&gt;Polling&lt;/strong&gt;, è decisamente dispendiosa. Una possibile alternativa è il &lt;strong&gt;Long Polling&lt;/strong&gt;, che consiste nel mantenere attiva una connesione dal client al server in uno stato &lt;em&gt;Pending&lt;/em&gt;: quando ci sarà un aggiornamento lato server, questo potrà essere comunicato utilizzando la connessione aperta. La risposta chiuderà la connessione, sarà quindi compito del client aprirne un’altra, ripetendo il processo. Sicuramente meno dispendioso del Polling, ma i browser moderni supportano delle valide alternative.&lt;/p&gt;

&lt;p&gt;Una di queste è l’utilizzo dei &lt;strong&gt;Server-Sent Event&lt;/strong&gt;, che ci permette di ricevere aggiornamenti dal server restando in ascolto su un particolare &lt;em&gt;endpoint&lt;/em&gt;. In pratica registriamo una callback JavaScript utilizzando uno speciale oggetto chiamato &lt;strong&gt;EventSource&lt;/strong&gt;, a quel punto il sever, utilizzando il content-type &lt;em&gt;text/event-stream&lt;/em&gt; può invocare questa callback senza che ci siano attese lato client. I Server-Sent Event sono però monodirezionali (dal server al client), se abbiamo bisogno di connessioni bidirezionali senza attese possiamo utilizzare la specificica &lt;strong&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc6455&quot;&gt;WebSocket&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Tutto bello, ma abbiamo bisogno di sapere se browser e server supportano la scelta che facciamo. Ed è proprio qui che entra in gioco &lt;strong&gt;SignalR&lt;/strong&gt;: in maniera completamente trasparente al programmatore permette di utilizzare lo strumento migliore messo a disposizione da client e server. Questo significa che, se disponibile, SignalR utilizzerà le WebSocket, altrimenti proverà con i Server-Sent Events. Nel caso nessuno dei due sia disponibile, verrà utilizzato il Long Polling. Questa operazione di scelta del trasporto è automatica e non impatta sull’API messa a disposizione da SignalR.&lt;/p&gt;

&lt;p&gt;Il programmatore deve solo preoccuparsi di definire una o più classi &lt;strong&gt;Hub&lt;/strong&gt;, che verranno utilizzate come endpoint per la comunicazione. Trovate maggiori informazioni &lt;a href=&quot;https://dotnet.microsoft.com/apps/aspnet/signalr&quot;&gt;qui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;blazor-server&quot;&gt;Blazor Server&lt;/h2&gt;

&lt;p&gt;Adesso che sappiamo come siamo arrivati ad oggi e quali sono le tecnologie che abbiamo a disposizione, siamo pronti per analizzare come funziona Blazor Server: si tratta di un nuovo framework per la realizzazione dell’interfaccia utente delle nostre applicazioni ASP.NET Core, definita utilizzando HTML e CSS e sfruttando Razor e C# per il suo aggiornamento dinamico.&lt;/p&gt;

&lt;p&gt;Gli aggiornamenti dell’interfaccia avvengono lato server, e vengono inviati al client utilizzando SignalR. Vediamolo in funzione lanciando l’applicazione che abbiamo creato nell’&lt;a href=&quot;/blazor/intro/2020/02/02/che-cosa-e-blazor.html&quot;&gt;articolo precedente&lt;/a&gt;, utilizzando il comando della .NET CLI &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet run&lt;/code&gt;, o il classico F5 di Visual Studio.&lt;/p&gt;

&lt;p&gt;Aprite Chrome o una versione del nuovo &lt;a href=&quot;https://www.microsoft.com/en-us/edge&quot;&gt;EDGE&lt;/a&gt;, nel mio caso EDGE per MAC, che come probabilmente saprete utilizza l’engine di Chromium. Aprite il pannello degli stumenti per gli sviluppatori, selezionate il TAB Network, Filter All e andate all’indirizzo https://localhost:5001:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorserver/traffico-rete-blazor-server.png&quot; alt=&quot;Traffico di rete di Blazor Server&quot; title=&quot;Traffico di rete di Blazor Server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Quello che vedete è il template di base di Blazor Server. Nel TAB Network potete vedere il traffico di rete, tra cui la WebSocket inizializzata da SignalR durante la negoziazione del trasporto. Se cliccate sul Filtro WS (WebSockets) del TAB Network, selezionate la WebSocket &lt;code class=&quot;highlighter-rouge&quot;&gt;_blazor&lt;/code&gt;, cliccate sulla voce di menu &lt;em&gt;Counter&lt;/em&gt; e poi sul pulsante &lt;em&gt;Click me&lt;/em&gt;, vedrete quanto segue:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/blazorserver/traffico-websocket-blazor-server.png&quot; alt=&quot;Traffico WebSocket di Blazor Server&quot; title=&quot;Traffico WebSocket di Blazor Server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nel Tab &lt;code class=&quot;highlighter-rouge&quot;&gt;Messages&lt;/code&gt;, potete vedere lo scambio dati bidirezionale tra il client e il server: il click sul pulsante ha inviato tramite la WebSocket la richiesta al server, che ha aggiornato il valore di un contatore, rigenerato l’HTML, confrontato con l’HTML precedente e inviato il differenziale al client mediante la WebSocket. A quel punto il codice presente nello script &lt;code class=&quot;highlighter-rouge&quot;&gt;blazor.server.js&lt;/code&gt; ha aggiornato il DOM del browser!&lt;/p&gt;

&lt;h2 id=&quot;conclusioni&quot;&gt;Conclusioni&lt;/h2&gt;

&lt;p&gt;Per oggi ci fermiamo qui, ma siamo riusciti ad analizzare il funzionamento di Blazor Server, ripercorrendo velocemente la storia che ha portato alla sua nascita e sottolineando come sia possibile riutilizzare tutte le conoscenze che abbiamo dello stack .NET Core per realizzare un front-end con la user experience di una Single Page Application.&lt;/p&gt;

&lt;p&gt;La sfida tecnologica si gioca però sul tavolo &lt;strong&gt;WebAssembly&lt;/strong&gt;, e nel prossimo articolo vedremo come sia possibile far girare il .NET Core Framework direttamente nel browser, senza nessun plug-in aggiuntivo.&lt;/p&gt;</content><author><name>Michele Aponte</name></author><summary type="html">Vediamo come funziona la versione Server di Blazor, resa disponibile con .NET Core 3.0 e utilizzabile già in produzione.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/articoli/blazorserver/blazorserver.png" /><media:content medium="image" url="/assets/articoli/blazorserver/blazorserver.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Che cos’è Blazor</title><link href="/blazor/intro/2020/02/02/che-cosa-e-blazor.html" rel="alternate" type="text/html" title="Che cos'è Blazor" /><published>2020-02-02T00:00:00+01:00</published><updated>2020-02-02T00:00:00+01:00</updated><id>/blazor/intro/2020/02/02/che-cosa-e-blazor</id><content type="html" xml:base="/blazor/intro/2020/02/02/che-cosa-e-blazor.html">&lt;p&gt;Cerchiamo di capire, in questo primo articolo, da dove è nata l’esigenza di un nuovo framework di front-end.&lt;/p&gt;

&lt;h2 id=&quot;un-po-di-storia&quot;&gt;Un po’ di storia&lt;/h2&gt;

&lt;p&gt;Con la (presunta) &lt;em&gt;morte del Desktop&lt;/em&gt; di qualche anno fa, molti hanno deciso di migrare le proprie applicazioni su tecnologie web, risolvendo il problema della compatibilità cross-platform e della distribuzione degli aggiornamenti dell’applicazione. Spostando però una parte dell’elaborazione dai client al server, sono nati tutta una serie di problemi tecnici, tra cui quello dell’&lt;strong&gt;esperienza utente&lt;/strong&gt;, della &lt;strong&gt;connettività&lt;/strong&gt; continua al server e del &lt;strong&gt;carico&lt;/strong&gt; da gestire.&lt;/p&gt;

&lt;p&gt;Niente di insuperabile, ma il passaggio non è stato indolore, anzi, molti si sono resi conto che migrare la propria interfaccia da una tecnologia client, come ad esempio Windows Form, a una tecnologia web, come WebForms o MVC, è spesso un rifacimento totale della propria soluzione software.&lt;/p&gt;

&lt;p&gt;Nella maggior parte dei casi i benefici superano gli svantaggi e comunque lo sviluppo software si evolve ad una velocità tale da non poter rimanere troppo indietro. In ogni caso, a un certo punto, è nata l’esigenza di avere una user experience più spinta, fortemente limitata dal &lt;em&gt;rendering server-side&lt;/em&gt; di ASP.NET. Ed è qui che è stata evidente l’esigenza di eseguire codice nel browser, utilizzando &lt;strong&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/checosaeblazor/javascript_nightmare.png&quot; alt=&quot;JavaScript Nightmare&quot; title=&quot;L'incubo JavaScript&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I programmatori .NET non amano JavaScript per motivi storici, ma con l’aiuto di &lt;strong&gt;jQuery&lt;/strong&gt; e di alcuni helper si è cominciato ad aggiungere funzionalità client alle applicazioni web. Tutto bene fino a quando non si è sentita l’esigenza di spostare sul client tutto il rendering dell’interfaccia, lasciando al server solo le API per il recupero e il salvataggio dei dati.&lt;/p&gt;

&lt;p&gt;A quel punto la scelta di una libreria, o addirittura un framework completo è diventanto indispensabile per rendere sostenibile lo sviluppo, e soluzioni come &lt;strong&gt;Angular&lt;/strong&gt;, &lt;strong&gt;React&lt;/strong&gt; e &lt;strong&gt;Vue&lt;/strong&gt; hanno cominciato a diffondersi anche tra gli sviluppatori .NET. Angular, in particolare, si è affermato grazie all’utilizzo di &lt;strong&gt;Typescript&lt;/strong&gt; e a un approccio molto vicino ai framework Microsoft.&lt;/p&gt;

&lt;p&gt;Con questi strumenti è possibile realizzare quella che viene chiamata una &lt;strong&gt;&lt;em&gt;Single Page Application&lt;/em&gt;&lt;/strong&gt;, cioè una singola pagina HTML all’interno della quale l’interfaccia viene creata dinamicamente e la navigazione tra le pagine dell’applicazione avviene senza spostarsi fisicamente.&lt;/p&gt;

&lt;h2 id=&quot;perchè-blazor&quot;&gt;Perchè Blazor&lt;/h2&gt;

&lt;p&gt;Dover imparare un linguaggio come JavaScript e un nuovo framework non è certo una passeggiata, anche se aiutati da TypeScript. Molti hanno preferito attendere per capire come si evolveva il mercato, altri per mancanza di tempo per affrontare il tutto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/checosaeblazor/blazorserver_vs_blazorwebassembly.png&quot; alt=&quot;Blazor Server vs Blazor WebAssembly&quot; title=&quot;Blazor Server vs Blazor WebAssembly&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Blazor&lt;/strong&gt; si colloca proprio qui. Risolve esattamente questo problema. E’ possibile, grazie ad esso, riutilizzare le prorie conoscenze del .NET framework per realizzare una Single Page Application. Lo fa in diversi modi, sfruttando diverse tecnologie, e possiamo scegliere la modalità che meglio si adatta alle nostre esigenze.&lt;/p&gt;

&lt;p&gt;Con il framework .NET Core 3.0 è stato rilasciato in RTM &lt;strong&gt;Blazor Server&lt;/strong&gt;, che sfrutta &lt;strong&gt;SignalR&lt;/strong&gt; per inviare al browser gli aggiornamenti da fare all’interfaccia, eseguendo comunque l’elaborazione lato server. Con il .NET Core 3.1 è stato rilasciato in preview &lt;strong&gt;Blazor WebAssembly&lt;/strong&gt;, che invece scarica nel browser l’applicazione che realizziamo e la esegue grazie allo standard &lt;strong&gt;WebAssembly&lt;/strong&gt;. Approfondiremo la differenza tra i due nel prossimo articolo, per il momento cerchiamo di capire perchè sta avendo tanto successo.&lt;/p&gt;

&lt;h2 id=&quot;perchè-investire-su-blazor&quot;&gt;Perchè investire su Blazor&lt;/h2&gt;

&lt;p&gt;Se conoscete ASP.NET Core e Razor, il passaggio a Blazor è davvero semplice: è questa la sua forza. Una volta capito (davvero) il concetto di componente, entrambe le versioni vi permettono di sfruttare tutto quello che già sapete e su cui avete investito. Inoltre c’è già un bel po’ di materiale e tanti componenti già pronti per pensare di sviluppare una vera applicazione da mettere in produzione.&lt;/p&gt;

&lt;p&gt;Blazor non è nè &lt;em&gt;Silverlight&lt;/em&gt; nè &lt;em&gt;LightSwitch&lt;/em&gt;, Microsoft ci crede e ci sta investendo. La community di sviluppatori .NET è fortemente interessata e lo ha dimostrato fin dal primo momento. Non c’è nessun plug-in da installare, è tutto basato su standard web, ed è questo che vi garantisce che non farà la fine degli esperimenti del passato.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/checosaeblazor/blazor-roadmap.png&quot; alt=&quot;Blazor Roadmap&quot; title=&quot;Blazor Roadmap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Microsoft ci crede così tanto che ha annunciato una roadmap da brividi per Blazor: non solo web, ma anche &lt;strong&gt;Mobile&lt;/strong&gt; e &lt;strong&gt;Desktop&lt;/strong&gt;. E’ possibile già provare qualcosa di sperimentale su Mobile, grazie ai &lt;strong&gt;Mobile Blazor Bindings&lt;/strong&gt; basati su Xamarin.Forms:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/aspnet/mobile-blazor-bindings-experiment/&quot;&gt;https://devblogs.microsoft.com/aspnet/mobile-blazor-bindings-experiment/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;installazione&quot;&gt;Installazione&lt;/h2&gt;

&lt;p&gt;Se avete Visual Studio 2019 (la versione community è scaricabile gratuitamente &lt;a href=&quot;https://visualstudio.microsoft.com/it/vs/community&quot;&gt;qui&lt;/a&gt;) e avete installato il supporto allo sviluppo ASP.NET e Web, avete già tutto quello che vi serve: create un nuovo progetto Blazor e lanciate l’applicazione per cominciare a prenderci confidenza.&lt;/p&gt;

&lt;p&gt;Se siete appassionati di Visual Studio Code e della riga di comando, vi basta installare i template per blazor con il seguente comando:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;dotnet new &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; Microsoft.AspNetCore.Blazor.Templates::3.2.0-preview1.20073.1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In questo modo potete creare una applicazione Blazor Server con il comando&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;dotnet new blazorserver&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oppure una applicazione Blazor WebAssembly con il comando:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;dotnet new blazorwasm&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusioni&quot;&gt;Conclusioni&lt;/h2&gt;

&lt;p&gt;In questo primo articolo abbiamo solo scaldato i motori, cercando di capire dove si colloca Blazor e perchè è la scelta da fare in questo momento per gli sviluppatori .NET. Nei prossimi articoli andremo a fondo nell’utilizzo del framework e cercheremo di toccare con mano la potenza di questo strumento.&lt;/p&gt;</content><author><name>Michele Aponte</name></author><summary type="html">Cerchiamo di capire, in questo primo articolo, da dove è nata l’esigenza di un nuovo framework di front-end.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/articoli/checosaeblazor/che_cosa_e_blazor.png" /><media:content medium="image" url="/assets/articoli/checosaeblazor/che_cosa_e_blazor.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>