<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-02-02T20:22:46+01:00</updated><id>/feed.xml</id><title type="html">Blazor Developer Italiani</title><subtitle>La prima community italiana dedicata allo sviluppo di applicazioni con Blazor, il framework Microsoft per la realizzazione di Single Page Application con .NET Core, SignalR, WebAssembly e Razor</subtitle><entry><title type="html">Che cos’è Blazor</title><link href="/blazor/intro/2020/02/02/che-cosa-e-blazor.html" rel="alternate" type="text/html" title="Che cos'è Blazor" /><published>2020-02-02T00:00:00+01:00</published><updated>2020-02-02T00:00:00+01:00</updated><id>/blazor/intro/2020/02/02/che-cosa-e-blazor</id><content type="html" xml:base="/blazor/intro/2020/02/02/che-cosa-e-blazor.html">&lt;p&gt;Cerchiamo di capire, in questo primo articolo, da dove è nata l’esigenza di un nuovo framework di front-end.&lt;/p&gt;

&lt;h2 id=&quot;un-po-di-storia&quot;&gt;Un po’ di storia&lt;/h2&gt;

&lt;p&gt;Con la (presunta) &lt;em&gt;morte del Desktop&lt;/em&gt; di qualche anno fa, molti hanno deciso di migrare le proprie applicazioni su tecnologie web, risolvendo il problema della compatibilità cross-platform e della distribuzione degli aggiornamenti dell’applicazione. Spostando però una parte dell’elaborazione dai client al server, sono nati tutta una serie di problemi tecnici, tra cui quello dell’&lt;strong&gt;esperienza utente&lt;/strong&gt;, della &lt;strong&gt;connettività&lt;/strong&gt; continua al server e del &lt;strong&gt;carico&lt;/strong&gt; da gestire.&lt;/p&gt;

&lt;p&gt;Niente di insuperabile, ma il passaggio non è stato indolore, anzi, molti si sono resi conto che migrare la propria interfaccia da una tecnologia client, come ad esempio Windows Form, a una tecnologia web, come WebForms o MVC, è spesso un rifacimento totale della propria soluzione software.&lt;/p&gt;

&lt;p&gt;Nella maggior parte dei casi i benefici superano gli svantaggi e comunque lo sviluppo software si evolve ad una velocità tale da non poter rimanere troppo indietro. In ogni caso, a un certo punto, è nata l’esigenza di avere una user experience più spinta, fortemente limitata dal &lt;em&gt;rendering server-side&lt;/em&gt; di ASP.NET. Ed è qui che è stata evidente l’esigenza di eseguire codice nel browser, utilizzando &lt;strong&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/checosaeblazor/javascript_nightmare.png&quot; alt=&quot;JavaScript Nightmare&quot; title=&quot;L'incubo JavaScript&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I programmatori .NET non amano JavaScript per motivi storici, ma con l’aiuto di &lt;strong&gt;jQuery&lt;/strong&gt; e ad alcuni helper si è cominciato ad aggiungere funzionalità client alle applicazioni web. Tutto bene fino a quando non si è sentita l’esigenza di spostare sul client tutto il rendering dell’interfaccia, lasciando al server solo le API per il recupero e il salvataggio dei dati.&lt;/p&gt;

&lt;p&gt;A quel punto la scelta di una libreria, o addirittura un framework completo è diventanto indispensabile per rendere sostenibile lo sviluppo, e soluzioni come &lt;strong&gt;Angular&lt;/strong&gt;, &lt;strong&gt;React&lt;/strong&gt; e &lt;strong&gt;Vue&lt;/strong&gt; hanno cominciato a diffondersi anche tra gli sviluppatori .NET. Angular, in particolare, si è affermato grazie all’utilizzo di &lt;strong&gt;Typescript&lt;/strong&gt; e a un approccio molto vicino ai framework Microsoft.&lt;/p&gt;

&lt;p&gt;Con questi strumenti è possibile realizzare quella che viene chiamata una &lt;strong&gt;&lt;em&gt;Single Page Application&lt;/em&gt;&lt;/strong&gt;, cioè una singola pagina HTML all’interno della quale l’interfaccia viene creata dinamicamente e la navigazione tra le pagine dell’applicazione avviene senza spostarsi fisicamente.&lt;/p&gt;

&lt;h2 id=&quot;perchè-blazor&quot;&gt;Perchè Blazor&lt;/h2&gt;

&lt;p&gt;Dover imparare un linguaggio come JavaScript e un nuovo framework non è certo una passeggiata, anche se aiutati da TypeScript. Molti hanno preferito attendere per capire come si evolveva il mercato, altri per mancanza di tempo per affrontare il tutto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/checosaeblazor/blazorserver_vs_blazorwebassembly.png&quot; alt=&quot;Blazor Server vs Blazor WebAssembly&quot; title=&quot;Blazor Server vs Blazor WebAssembly&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Blazor&lt;/strong&gt; si colloca proprio qui. Risolve esattamente questo problema. E’ possibile, grazie ad esso, riutilizzare le prorie conoscenze del .NET framework per realizzare una Single Page Application. Lo fa in diversi modi, sfruttando diverse tecnologie, e possiamo scegliere la modalità che meglio si adatta alle nostre esigenze.&lt;/p&gt;

&lt;p&gt;Con il framework .NET Core 3.0 è stato rilasciato in RTM &lt;strong&gt;Blazor Server&lt;/strong&gt;, che sfrutta &lt;strong&gt;SignalR&lt;/strong&gt; per inviare al browser gli aggiornamenti da fare all’interfaccia, eseguendo comunque l’elaborazione lato server. Con il .NET Core 3.1 è stato rilasciato in preview &lt;strong&gt;Blazor WebAssembly&lt;/strong&gt;, che invece scarica nel browser l’applicazione che realizziamo e la esegue grazie allo standard &lt;strong&gt;WebAssembly&lt;/strong&gt;. Approfondiremo la differenza tra i due nel prossimo articolo, per il momento cerchiamo di capire perchè sta avendo tanto successo.&lt;/p&gt;

&lt;h2 id=&quot;perchè-investire-su-blazor&quot;&gt;Perchè investire su Blazor&lt;/h2&gt;

&lt;p&gt;Se conoscete ASP.NET Core e Razor, il passaggio a Blazor è davvero semplice: è questa la sua forza. Una volta capito (davvero) il concetto di componente, entrambe le versioni vi permettono di sfruttare tutto quello che già sapete e su cui avete investito. Inoltre c’è già un bel po’ di materiale e tanti componenti già pronti per pensare di sviluppare una vera applicazione da mettere in produzione.&lt;/p&gt;

&lt;p&gt;Blazor non è nè &lt;em&gt;Silverlight&lt;/em&gt; nè &lt;em&gt;LightSwitch&lt;/em&gt;, Microsoft ci crede e ci sta investendo. La community di sviluppatori .NET è fortemente interessata e lo ha dimostrato fin dal primo momento. Non c’è nessun plug-in da installare, è tutto basato su standard web, ed è questo che vi garantisce che non farà la fine degli esperimenti del passato.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/articoli/checosaeblazor/blazor-roadmap.png&quot; alt=&quot;Blazor Roadmap&quot; title=&quot;Blazor Roadmap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Microsoft ci crede così tanto che ha annunciato una roadmap da brividi per Blazor: non solo web, ma anche &lt;strong&gt;Mobile&lt;/strong&gt; e &lt;strong&gt;Desktop&lt;/strong&gt;. E’ possibile già provare qualcosa di sperimentale su Mobile, grazie ai &lt;strong&gt;Mobile Blazor Bindings&lt;/strong&gt; basati su Xamarin.Forms:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/aspnet/mobile-blazor-bindings-experiment/&quot;&gt;https://devblogs.microsoft.com/aspnet/mobile-blazor-bindings-experiment/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;installazione&quot;&gt;Installazione&lt;/h2&gt;

&lt;p&gt;Se avete Visual Studio 2019 (la versione community è scaricabile gratuitamente [qui] (https://visualstudio.microsoft.com/it/vs/community/)) e avete installato il supporto allo sviluppo ASP.NEt e Web, avete già tutto quello che vi serve: create un nuovo progetto Blazor e lanciate l’applicazione per cominciare a prenderci confidenza.&lt;/p&gt;

&lt;p&gt;Se siete appassionati di Visual Studio Code e della riga di comando, vi basta installare i template per blazor con il seguente comando:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;dotnet new &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; Microsoft.AspNetCore.Blazor.Templates::3.2.0-preview1.20073.1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In questo modo potete creare una applicazione Blazor Server con il comando&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;dotnet new blazorserver&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oppure una applicazione Blazor WebAssembly con il comando:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;dotnet new blazorwasm&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusioni&quot;&gt;Conclusioni&lt;/h2&gt;

&lt;p&gt;In questo prima articolo abbiamo solo scaldato i motori, cercando di capire dove si colloca Blazor e perchè è la scelta da fare in questo momento per gli sviluppatori .NET. Nei prossimi articoli andremo a fondo nell’utilizzo del framework e cercheremo di toccare con mano la potenza di questo strumento.&lt;/p&gt;</content><author><name></name></author><summary type="html">Cerchiamo di capire, in questo primo articolo, da dove è nata l’esigenza di un nuovo framework di front-end.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/articoli/checosaeblazor/che_cosa_e_blazor.png" /><media:content medium="image" url="/assets/articoli/checosaeblazor/che_cosa_e_blazor.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>